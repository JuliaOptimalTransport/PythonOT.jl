var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Exact-optimal-transport-(Kantorovich)-problem","page":"API","title":"Exact optimal transport (Kantorovich) problem","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"emd\nemd2","category":"page"},{"location":"api/#PythonOT.emd","page":"API","title":"PythonOT.emd","text":"emd(μ, ν, C; kwargs...)\n\nCompute the optimal transport map for the Monge-Kantorovich problem with source and target marginals μ and ν and cost matrix C of size (length(μ), length(ν)).\n\nThe optimal transport map γ is of the same size as C and solves\n\ninf_gamma in Pi(mu nu) langle gamma C rangle\n\nThis function is a wrapper of the function emd in the Python Optimal Transport package. Keyword arguments are listed in the documentation of the Python function.\n\nExamples\n\njulia> μ = [0.5, 0.2, 0.3];\n\njulia> ν = [0.0, 1.0];\n\njulia> C = [0.0  1.0;\n            2.0  0.0;\n            0.5  1.5];\n\njulia> emd(μ, ν, C)\n3×2 Matrix{Float64}:\n 0.0  0.5\n 0.0  0.2\n 0.0  0.3\n\n\n\n\n\n","category":"function"},{"location":"api/#PythonOT.emd2","page":"API","title":"PythonOT.emd2","text":"emd2(μ, ν, C; kwargs...)\n\nCompute the optimal transport cost for the Monge-Kantorovich problem with source and target marginals μ and ν and cost matrix C of size (length(μ), length(ν)).\n\nThe optimal transport cost is the scalar value\n\ninf_gamma in Pi(mu nu) langle gamma C rangle\n\nThis function is a wrapper of the function emd2 in the Python Optimal Transport package. Keyword arguments are listed in the documentation of the Python function.\n\nExamples\n\njulia> μ = [0.5, 0.2, 0.3];\n\njulia> ν = [0.0, 1.0];\n\njulia> C = [0.0  1.0;\n            2.0  0.0;\n            0.5  1.5];\n\njulia> emd2(μ, ν, C)\n0.95\n\n\n\n\n\n","category":"function"},{"location":"api/#Entropically-regularised-optimal-transport","page":"API","title":"Entropically regularised optimal transport","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"sinkhorn\nsinkhorn2","category":"page"},{"location":"api/#PythonOT.sinkhorn","page":"API","title":"PythonOT.sinkhorn","text":"sinkhorn(μ, ν, C, ε; kwargs...)\n\nCompute the optimal transport map for the entropic regularization optimal transport problem with source and target marginals μ and ν, cost matrix C of size (length(μ), length(ν)), and entropic regularization parameter ε.\n\nThe optimal transport map γ is of the same size as C and solves\n\ninf_gamma in Pi(mu nu) langle gamma C rangle\n+ varepsilon Omega(gamma)\n\nwhere Omega(gamma) = sum_ij gamma_ij log gamma_ij is the entropic regularization term.\n\nThis function is a wrapper of the function sinkhorn in the Python Optimal Transport package. Keyword arguments are listed in the documentation of the Python function.\n\nExamples\n\njulia> μ = [0.5, 0.2, 0.3];\n\njulia> ν = [0.0, 1.0];\n\njulia> C = [0.0  1.0;\n            2.0  0.0;\n            0.5  1.5];\n\njulia> sinkhorn(μ, ν, C, 0.01)\n3×2 Matrix{Float64}:\n 0.0  0.5\n 0.0  0.2\n 0.0  0.3\n\n\n\n\n\n","category":"function"},{"location":"api/#PythonOT.sinkhorn2","page":"API","title":"PythonOT.sinkhorn2","text":"sinkhorn2(μ, ν, C, ε; kwargs...)\n\nCompute the optimal transport cost for the entropic regularization optimal transport problem with source and target marginals μ and ν, cost matrix C of size (length(μ), length(ν)), and entropic regularization parameter ε.\n\nThe optimal transport cost is the scalar value\n\ninf_gamma in Pi(mu nu) langle gamma C rangle\n+ varepsilon Omega(gamma)\n\nwhere Omega(gamma) = sum_ij gamma_ij log gamma_ij is the entropic regularization term.\n\nThis function is a wrapper of the function sinkhorn2 in the Python Optimal Transport package. Keyword arguments are listed in the documentation of the Python function.\n\nExamples\n\njulia> μ = [0.5, 0.2, 0.3];\n\njulia> ν = [0.0, 1.0];\n\njulia> C = [0.0  1.0;\n            2.0  0.0;\n            0.5  1.5];\n\njulia> round.(sinkhorn2(μ, ν, C, 0.01); sigdigits=6)\n1-element Vector{Float64}:\n 0.95\n\n\n\n\n\n","category":"function"},{"location":"api/#Unbalanced-optimal-transport","page":"API","title":"Unbalanced optimal transport","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"sinkhorn_unbalanced\nsinkhorn_unbalanced2","category":"page"},{"location":"api/#PythonOT.sinkhorn_unbalanced","page":"API","title":"PythonOT.sinkhorn_unbalanced","text":"sinkhorn_unbalanced(μ, ν, C, ε, λ; kwargs...)\n\nCompute the optimal transport map for the unbalanced entropic regularization optimal transport problem with source and target marginals μ and ν, cost matrix C of size (length(μ), length(ν)), entropic regularization parameter ε, and marginal relaxation term λ.\n\nThe optimal transport map γ is of the same size as C and solves\n\ninf_gamma langle gamma C rangle\n+ varepsilon Omega(gamma)\n+ lambda mathrmKL(gamma 1 mu)\n+ lambda mathrmKL(gamma^mathsfT 1 nu)\n\nwhere Omega(gamma) = sum_ij gamma_ij log gamma_ij is the entropic regularization term and mathrmKL is the Kullback-Leibler divergence.\n\nThis function is a wrapper of the function sinkhorn_unbalanced in the Python Optimal Transport package. Keyword arguments are listed in the documentation of the Python function.\n\nExamples\n\njulia> μ = [0.5, 0.2, 0.3];\n\njulia> ν = [0.0, 1.0];\n\njulia> C = [0.0  1.0;\n            2.0  0.0;\n            0.5  1.5];\n\njulia> sinkhorn_unbalanced(μ, ν, C, 0.01, 1_000)\n3×2 Matrix{Float64}:\n 0.0  0.499964\n 0.0  0.200188\n 0.0  0.29983\n\n\n\n\n\n","category":"function"},{"location":"api/#PythonOT.sinkhorn_unbalanced2","page":"API","title":"PythonOT.sinkhorn_unbalanced2","text":"sinkhorn_unbalanced2(μ, ν, C, ε, λ; kwargs...)\n\nCompute the optimal transport cost for the unbalanced entropic regularization optimal transport problem with source and target marginals μ and ν, cost matrix C of size (length(μ), length(ν)), entropic regularization parameter ε, and marginal relaxation term λ.\n\nThe optimal transport cost is the scalar value\n\ninf_gamma langle gamma C rangle\n+ varepsilon Omega(gamma)\n+ lambda mathrmKL(gamma 1 mu)\n+ lambda mathrmKL(gamma^mathsfT 1 nu)\n\nwhere Omega(gamma) = sum_ij gamma_ij log gamma_ij is the entropic regularization term and mathrmKL is the Kullback-Leibler divergence.\n\nThis function is a wrapper of the function sinkhorn_unbalanced2 in the Python Optimal Transport package. Keyword arguments are listed in the documentation of the Python function.\n\nExamples\n\njulia> μ = [0.5, 0.2, 0.3];\n\njulia> ν = [0.0, 1.0];\n\njulia> C = [0.0  1.0;\n            2.0  0.0;\n            0.5  1.5];\n\njulia> round.(sinkhorn_unbalanced2(μ, ν, C, 0.01, 1_000); sigdigits=6)\n1-element Vector{Float64}:\n 0.949709\n\n\n\n\n\n","category":"function"},{"location":"#PythonOT.jl","page":"Home","title":"PythonOT.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Julia interface for the Python Optimal Transport (POT) package","category":"page"}]
}
